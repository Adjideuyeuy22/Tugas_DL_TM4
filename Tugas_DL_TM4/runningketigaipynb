{
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "version": "3.6.4",
      "file_extension": ".py",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "name": "python",
      "mimetype": "text/x-python"
    },
    "kaggle": {
      "accelerator": "gpu",
      "dataSources": [
        {
          "sourceId": 399170,
          "sourceType": "datasetVersion",
          "datasetId": 177084
        }
      ],
      "dockerImageVersionId": 30407,
      "isInternetEnabled": false,
      "language": "python",
      "sourceType": "notebook",
      "isGpuEnabled": true
    },
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "include_colab_link": true
    },
    "accelerator": "GPU"
  },
  "nbformat_minor": 0,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Adjideuyeuy22/Tugas_DL_TM4/blob/main/Tugas_DL_TM4/runningketigaipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "source": [
        "\n",
        "# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES\n",
        "# TO THE CORRECT LOCATION (/kaggle/input) IN YOUR NOTEBOOK,\n",
        "# THEN FEEL FREE TO DELETE THIS CELL.\n",
        "# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON\n",
        "# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR\n",
        "# NOTEBOOK.\n",
        "\n",
        "import os\n",
        "import sys\n",
        "from tempfile import NamedTemporaryFile\n",
        "from urllib.request import urlopen\n",
        "from urllib.parse import unquote, urlparse\n",
        "from urllib.error import HTTPError\n",
        "from zipfile import ZipFile\n",
        "import tarfile\n",
        "import shutil\n",
        "\n",
        "CHUNK_SIZE = 40960\n",
        "DATA_SOURCE_MAPPING = 'asl-dataset:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F177084%2F399170%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240504%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240504T085605Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D1373e28c696a6f5aa2153b89d0bd8c02f12b451241057b5454a327b1ef492e1406edc27b746acb62a0ef4399c85bba7bc865e5429c54f946771c4165b8fe9c945c5800b53ff4d45ee7ea37ec3d5ec95eeb1b911d5119db6b7fce08a8ef4fae827d02561a601bb1a47946e0d2a6652681cd8d7882a0be7f25ef6e2d8405cc9dbd82938b8c87fadb39fe3ac8e3b2eb297e295219c045dd86e1b93d91c48de675c759c506a771060489f79c329a2476f91c42e967a5689a6408deb0cc2003790fb6152cdd7bed7b4134bc719cdf69828d29e0e7c962e71dff0c0ac02428c9416312ac9bddd9c40e2e31ed5afc5063553e91aa8d79329615a9efd995e07028acb1de'\n",
        "\n",
        "KAGGLE_INPUT_PATH='/kaggle/input'\n",
        "KAGGLE_WORKING_PATH='/kaggle/working'\n",
        "KAGGLE_SYMLINK='kaggle'\n",
        "\n",
        "!umount /kaggle/input/ 2> /dev/null\n",
        "shutil.rmtree('/kaggle/input', ignore_errors=True)\n",
        "os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)\n",
        "os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)\n",
        "\n",
        "try:\n",
        "  os.symlink(KAGGLE_INPUT_PATH, os.path.join(\"..\", 'input'), target_is_directory=True)\n",
        "except FileExistsError:\n",
        "  pass\n",
        "try:\n",
        "  os.symlink(KAGGLE_WORKING_PATH, os.path.join(\"..\", 'working'), target_is_directory=True)\n",
        "except FileExistsError:\n",
        "  pass\n",
        "\n",
        "for data_source_mapping in DATA_SOURCE_MAPPING.split(','):\n",
        "    directory, download_url_encoded = data_source_mapping.split(':')\n",
        "    download_url = unquote(download_url_encoded)\n",
        "    filename = urlparse(download_url).path\n",
        "    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)\n",
        "    try:\n",
        "        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:\n",
        "            total_length = fileres.headers['content-length']\n",
        "            print(f'Downloading {directory}, {total_length} bytes compressed')\n",
        "            dl = 0\n",
        "            data = fileres.read(CHUNK_SIZE)\n",
        "            while len(data) > 0:\n",
        "                dl += len(data)\n",
        "                tfile.write(data)\n",
        "                done = int(50 * dl / int(total_length))\n",
        "                sys.stdout.write(f\"\\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded\")\n",
        "                sys.stdout.flush()\n",
        "                data = fileres.read(CHUNK_SIZE)\n",
        "            if filename.endswith('.zip'):\n",
        "              with ZipFile(tfile) as zfile:\n",
        "                zfile.extractall(destination_path)\n",
        "            else:\n",
        "              with tarfile.open(tfile.name) as tarfile:\n",
        "                tarfile.extractall(destination_path)\n",
        "            print(f'\\nDownloaded and uncompressed: {directory}')\n",
        "    except HTTPError as e:\n",
        "        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')\n",
        "        continue\n",
        "    except OSError as e:\n",
        "        print(f'Failed to load {download_url} to path {destination_path}')\n",
        "        continue\n",
        "\n",
        "print('Data source import complete.')\n"
      ],
      "metadata": {
        "id": "F3OhJfQP0U6h",
        "outputId": "ef71323f-a058-43cf-84c3-a1e542823c11",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "cell_type": "code",
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading asl-dataset, 59642568 bytes compressed\n",
            "[==================================================] 59642568 bytes downloaded\n",
            "Downloaded and uncompressed: asl-dataset\n",
            "Data source import complete.\n"
          ]
        }
      ],
      "execution_count": 1
    },
    {
      "cell_type": "code",
      "source": [
        "import cv2\n",
        "import random\n",
        "import os\n",
        "import keras\n",
        "import re\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import classification_report\n",
        "from keras.preprocessing import image\n",
        "from keras.preprocessing.image import ImageDataGenerator\n",
        "from keras.metrics import Precision, Recall\n",
        "from keras.callbacks import EarlyStopping, ReduceLROnPlateau\n",
        "from tensorflow.keras.models import Sequential, Model\n",
        "from tensorflow.keras.layers import (\n",
        "    Dense,\n",
        "    Flatten,\n",
        "    BatchNormalization,\n",
        "    Conv2D,\n",
        "    MaxPooling2D,\n",
        "    GlobalAveragePooling2D,\n",
        "    Dropout,\n",
        "    Input,\n",
        "    Activation,\n",
        "    concatenate,\n",
        ")"
      ],
      "metadata": {
        "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
        "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
        "execution": {
          "iopub.status.busy": "2023-03-31T03:50:50.011571Z",
          "iopub.execute_input": "2023-03-31T03:50:50.012266Z",
          "iopub.status.idle": "2023-03-31T03:50:50.023667Z",
          "shell.execute_reply.started": "2023-03-31T03:50:50.01223Z",
          "shell.execute_reply": "2023-03-31T03:50:50.02236Z"
        },
        "trusted": true,
        "id": "6JXANO4R0U6l"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "![image.png](attachment:197bb552-7601-458e-a430-66b81cc95ef9.png)"
      ],
      "metadata": {
        "id": "5GWMai2T0U6m"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "![image.png](attachment:bad3f502-5e3d-4616-9b64-2be9b1d7beee.png)\n",
        "![image.png](attachment:962a966c-fdc9-4309-8e79-a6242c0ff6b9.png)\n",
        "![image.png](attachment:33bcee2a-c638-40f0-8fdf-3e1224fcb3cb.png)\n",
        "![image.png](attachment:c2140e88-68ab-4e26-baf1-5a4c0b7c3c66.png)\n",
        "![image.png](attachment:cd134b9d-e19f-4e56-9fdc-e0e640c50206.png)\n",
        "![image.png](attachment:951ab2ca-5e24-4cee-b15c-0051cf35bde9.png)\n",
        "![image.png](attachment:6db20551-bade-40b3-af74-51e6fd6c41ec.png)\n",
        "![image.png](attachment:fe4bd8fe-a19e-43b1-b51c-cca7fc607da7.png)\n",
        "![image.png](attachment:fe8b9482-a3ad-46d9-98b3-f4c6f78566ee.png)\n",
        "![image.png](attachment:122b5cfe-1d6e-45c5-97dc-16aba52a727c.png)"
      ],
      "metadata": {
        "id": "0tZ53VEg0U6n"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Increasing the image size didn't result in increasing the training accuracy\n",
        "IMAGE_WIDTH = 224\n",
        "IMAGE_HEIGHT = 224\n",
        "IMAGE_SIZE = (IMAGE_WIDTH, IMAGE_HEIGHT)\n",
        "IMAGE_CHANNELS = 3\n",
        "\n",
        "\n",
        "# Path where our data is located\n",
        "base_path = \"/kaggle/input/asl-dataset/asl_dataset/\"\n",
        "\n",
        "# Dictionary to save our 12 classes\n",
        "categories = {\n",
        "    0: \"0\",\n",
        "    1: \"1\",\n",
        "    2: \"2\",\n",
        "    3: \"3\",\n",
        "    4: \"4\",\n",
        "    5: \"5\",\n",
        "    6: \"6\",\n",
        "    7: \"7\",\n",
        "    8: \"8\",\n",
        "    9: \"9\",\n",
        "    10: \"a\",\n",
        "    11: \"b\",\n",
        "    12: \"c\",\n",
        "    13: \"d\",\n",
        "    14: \"e\",\n",
        "    15: \"f\",\n",
        "    16: \"g\",\n",
        "    17: \"h\",\n",
        "    18: \"i\",\n",
        "    19: \"j\",\n",
        "    20: \"k\",\n",
        "    21: \"l\",\n",
        "    22: \"m\",\n",
        "    23: \"n\",\n",
        "    24: \"o\",\n",
        "    25: \"p\",\n",
        "    26: \"q\",\n",
        "    27: \"r\",\n",
        "    28: \"s\",\n",
        "    29: \"t\",\n",
        "    30: \"u\",\n",
        "    31: \"v\",\n",
        "    32: \"w\",\n",
        "    33: \"x\",\n",
        "    34: \"y\",\n",
        "    35: \"z\",\n",
        "}"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-03-31T03:53:51.411504Z",
          "iopub.execute_input": "2023-03-31T03:53:51.412204Z",
          "iopub.status.idle": "2023-03-31T03:53:51.429086Z",
          "shell.execute_reply.started": "2023-03-31T03:53:51.412165Z",
          "shell.execute_reply": "2023-03-31T03:53:51.428108Z"
        },
        "trusted": true,
        "id": "WU2YQ4mq0U6n"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def add_class_name_prefix(df, col_name):\n",
        "    df[col_name] = df[col_name].apply(\n",
        "        lambda x: x[re.search(\"_\", x).start() + 1 : re.search(\"_\", x).start() + 2]\n",
        "        + \"/\"\n",
        "        + x\n",
        "    )\n",
        "    return df\n",
        "\n",
        "\n",
        "# list conatining all the filenames in the dataset\n",
        "filenames_list = []\n",
        "# list to store the corresponding category, note that each folder of the dataset has one class of data\n",
        "categories_list = []\n",
        "\n",
        "for category in categories:\n",
        "    filenames = os.listdir(base_path + categories[category])\n",
        "    filenames_list = filenames_list + filenames\n",
        "    categories_list = categories_list + [category] * len(filenames)\n",
        "\n",
        "df = pd.DataFrame({\"filename\": filenames_list, \"category\": categories_list})\n",
        "df = add_class_name_prefix(df, \"filename\")\n",
        "\n",
        "# Shuffle the dataframe\n",
        "df = df.sample(frac=1).reset_index(drop=True)\n",
        "\n",
        "print(\"number of elements = \", len(df))\n",
        "df"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-03-31T03:46:53.781355Z",
          "iopub.execute_input": "2023-03-31T03:46:53.781829Z",
          "iopub.status.idle": "2023-03-31T03:46:53.843798Z",
          "shell.execute_reply.started": "2023-03-31T03:46:53.781797Z",
          "shell.execute_reply": "2023-03-31T03:46:53.842658Z"
        },
        "trusted": true,
        "id": "YpPZQhLh0U6o",
        "outputId": "c40b8e57-79cf-47f0-9f05-2c2fcdb34d92",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441
        }
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "number of elements =  2515\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                filename  category\n",
              "0       x/hand2_x_top_seg_4_cropped.jpeg        33\n",
              "1       q/hand2_q_bot_seg_3_cropped.jpeg        26\n",
              "2       7/hand2_7_top_seg_2_cropped.jpeg         7\n",
              "3       q/hand4_q_bot_seg_4_cropped.jpeg        26\n",
              "4       4/hand5_4_bot_seg_3_cropped.jpeg         4\n",
              "...                                  ...       ...\n",
              "2510    9/hand5_9_bot_seg_4_cropped.jpeg         9\n",
              "2511    m/hand2_m_bot_seg_2_cropped.jpeg        22\n",
              "2512    g/hand1_g_top_seg_2_cropped.jpeg        16\n",
              "2513  3/hand1_3_right_seg_4_cropped.jpeg         3\n",
              "2514   e/hand2_e_left_seg_4_cropped.jpeg        14\n",
              "\n",
              "[2515 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5241fd00-d344-41d6-a0a7-895f92d7e23c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>filename</th>\n",
              "      <th>category</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>x/hand2_x_top_seg_4_cropped.jpeg</td>\n",
              "      <td>33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>q/hand2_q_bot_seg_3_cropped.jpeg</td>\n",
              "      <td>26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>7/hand2_7_top_seg_2_cropped.jpeg</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>q/hand4_q_bot_seg_4_cropped.jpeg</td>\n",
              "      <td>26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4/hand5_4_bot_seg_3_cropped.jpeg</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2510</th>\n",
              "      <td>9/hand5_9_bot_seg_4_cropped.jpeg</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2511</th>\n",
              "      <td>m/hand2_m_bot_seg_2_cropped.jpeg</td>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2512</th>\n",
              "      <td>g/hand1_g_top_seg_2_cropped.jpeg</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2513</th>\n",
              "      <td>3/hand1_3_right_seg_4_cropped.jpeg</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2514</th>\n",
              "      <td>e/hand2_e_left_seg_4_cropped.jpeg</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2515 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5241fd00-d344-41d6-a0a7-895f92d7e23c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5241fd00-d344-41d6-a0a7-895f92d7e23c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5241fd00-d344-41d6-a0a7-895f92d7e23c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-24c250a2-d81d-4f1f-b25e-4704054078d3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-24c250a2-d81d-4f1f-b25e-4704054078d3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-24c250a2-d81d-4f1f-b25e-4704054078d3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 2515,\n  \"fields\": [\n    {\n      \"column\": \"filename\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2515,\n        \"samples\": [\n          \"n/hand5_n_dif_seg_2_cropped.jpeg\",\n          \"3/hand1_3_dif_seg_5_cropped.jpeg\",\n          \"u/hand2_u_right_seg_2_cropped.jpeg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"category\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 0,\n        \"max\": 35,\n        \"num_unique_values\": 36,\n        \"samples\": [\n          19,\n          6,\n          15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "random_row = random.randint(0, len(df) - 1)\n",
        "sample = df.iloc[random_row]\n",
        "randomimage = keras.utils.load_img(base_path + sample[\"filename\"])\n",
        "print(sample[\"filename\"])\n",
        "plt.imshow(randomimage)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-03-31T03:46:53.846504Z",
          "iopub.execute_input": "2023-03-31T03:46:53.846872Z",
          "iopub.status.idle": "2023-03-31T03:46:54.157719Z",
          "shell.execute_reply.started": "2023-03-31T03:46:53.846833Z",
          "shell.execute_reply": "2023-03-31T03:46:54.156615Z"
        },
        "trusted": true,
        "id": "wTayeNBx0U6o",
        "outputId": "c24e5e44-24bc-4b49-81d3-1ac36743cc39",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 470
        }
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4/hand2_4_right_seg_4_cropped.jpeg\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x79ac8648a500>"
            ]
          },
          "metadata": {},
          "execution_count": 5
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_visualization = df.copy()\n",
        "# Change the catgegories from numbers to names\n",
        "df_visualization[\"category\"] = df_visualization[\"category\"].apply(\n",
        "    lambda x: categories[x]\n",
        ")\n",
        "\n",
        "df_visualization[\"category\"].value_counts().plot.bar(x=\"count\", y=\"category\")\n",
        "\n",
        "plt.xlabel(\"Currency Classes\", labelpad=14)\n",
        "plt.ylabel(\"Images Count\", labelpad=14)\n",
        "plt.title(\"Count of images per class\", y=1.02)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-03-31T03:46:54.162035Z",
          "iopub.execute_input": "2023-03-31T03:46:54.162696Z",
          "iopub.status.idle": "2023-03-31T03:46:54.56479Z",
          "shell.execute_reply.started": "2023-03-31T03:46:54.162643Z",
          "shell.execute_reply": "2023-03-31T03:46:54.563635Z"
        },
        "trusted": true,
        "id": "i_Hz6xej0U6p",
        "outputId": "9bdc0023-679d-4298-d3ed-03d880aeda47",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 509
        }
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.02, 'Count of images per class')"
            ]
          },
          "metadata": {},
          "execution_count": 6
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Change the categories from numbers to names\n",
        "df[\"category\"] = df[\"category\"].replace(categories)\n",
        "\n",
        "# Split the data into training, validation, and testing sets (70%, 10%, 10%)\n",
        "train_df, temp_df = train_test_split(df, test_size=0.3, random_state=42)\n",
        "validate_df, test_df = train_test_split(temp_df, test_size=0.5, random_state=42)\n",
        "\n",
        "# Reset index for all dataframes\n",
        "train_df = train_df.reset_index(drop=True)\n",
        "validate_df = validate_df.reset_index(drop=True)\n",
        "test_df = test_df.reset_index(drop=True)\n",
        "\n",
        "# Print sizes of each set\n",
        "total_train = train_df.shape[0]\n",
        "total_validate = validate_df.shape[0]\n",
        "total_test = test_df.shape[0]\n",
        "print(\n",
        "    \"train size =\", total_train,\n",
        "    \"validate size =\", total_validate,\n",
        "    \"test size =\", total_test\n",
        ")\n"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-03-31T03:46:54.566259Z",
          "iopub.execute_input": "2023-03-31T03:46:54.566747Z",
          "iopub.status.idle": "2023-03-31T03:46:54.590423Z",
          "shell.execute_reply.started": "2023-03-31T03:46:54.566702Z",
          "shell.execute_reply": "2023-03-31T03:46:54.589193Z"
        },
        "trusted": true,
        "id": "G3w-KKyx0U6p",
        "outputId": "ed336656-e795-4b12-8d25-50010d1e5f89",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "train size = 1760 validate size = 377 test size = 378\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "batch_size = 64\n",
        "\n",
        "datagen = image.ImageDataGenerator(\n",
        "    ###  Augmentation Start  ###\n",
        "    rescale=1.0 / 255,\n",
        "    #     brightness_range=[0.5, 1.5],\n",
        "    #     rotation_range=30,\n",
        "    #     shear_range=0.1,\n",
        "    #     zoom_range=0.3,\n",
        "    #     horizontal_flip=True,\n",
        "    #     vertical_flip = True,\n",
        "    #     width_shift_range=0.2,\n",
        "    #     height_shift_range=0.2\n",
        "    ##  Augmentation End  ###\n",
        ")\n",
        "\n",
        "train_generator = datagen.flow_from_dataframe(\n",
        "    train_df,\n",
        "    base_path,\n",
        "    x_col=\"filename\",\n",
        "    y_col=\"category\",\n",
        "    target_size=IMAGE_SIZE,\n",
        "    class_mode=\"categorical\",\n",
        "    batch_size=batch_size,\n",
        ")\n",
        "\n",
        "validation_generator = datagen.flow_from_dataframe(\n",
        "    validate_df,\n",
        "    base_path,\n",
        "    x_col=\"filename\",\n",
        "    y_col=\"category\",\n",
        "    target_size=IMAGE_SIZE,\n",
        "    class_mode=\"categorical\",\n",
        "    batch_size=batch_size,\n",
        ")\n",
        "\n",
        "test_generator = datagen.flow_from_dataframe(\n",
        "    test_df,\n",
        "    base_path,\n",
        "    x_col=\"filename\",\n",
        "    y_col=\"category\",\n",
        "    target_size=IMAGE_SIZE,\n",
        "    color_mode=\"rgb\",\n",
        "    class_mode=\"categorical\",\n",
        "    batch_size=1,\n",
        "    shuffle=False,\n",
        ")"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-03-31T03:46:54.592131Z",
          "iopub.execute_input": "2023-03-31T03:46:54.592509Z",
          "iopub.status.idle": "2023-03-31T03:46:55.837753Z",
          "shell.execute_reply.started": "2023-03-31T03:46:54.592472Z",
          "shell.execute_reply": "2023-03-31T03:46:55.836712Z"
        },
        "trusted": true,
        "id": "mfswR_Vl0U6p",
        "outputId": "67138800-212b-4007-dd62-91da281c3268",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 1760 validated image filenames belonging to 36 classes.\n",
            "Found 377 validated image filenames belonging to 36 classes.\n",
            "Found 378 validated image filenames belonging to 36 classes.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "bnmomemtum = 0.9\n",
        "\n",
        "\n",
        "def fire_module(x, squeeze, expand):\n",
        "    y = Conv2D(filters=squeeze, kernel_size=1, activation=\"relu\", padding=\"same\")(x)\n",
        "    y = BatchNormalization(momentum=bnmomemtum)(y)\n",
        "    y1 = Conv2D(filters=expand // 2, kernel_size=1, activation=\"relu\", padding=\"same\")(y)\n",
        "    y1 = BatchNormalization(momentum=bnmomemtum)(y1)\n",
        "    y3 = Conv2D(filters=expand // 2, kernel_size=3, activation=\"relu\", padding=\"same\")(y)\n",
        "    y3 = BatchNormalization(momentum=bnmomemtum)(y3)\n",
        "    return concatenate([y1, y3])\n",
        "\n",
        "\n",
        "def SqueezeNet(input_shape, num_classes):\n",
        "    input = Input(shape=input_shape)\n",
        "    y = Conv2D(kernel_size=7, filters=96, strides=2, padding=\"same\", activation=\"relu\")(input)\n",
        "    y = BatchNormalization(momentum=bnmomemtum)(y)\n",
        "    y = MaxPooling2D(pool_size=3, strides=2)(y)\n",
        "    y = fire_module(y, 16, 64)\n",
        "    y = fire_module(y, 16, 64)\n",
        "    y = fire_module(y, 32, 128)\n",
        "    y = MaxPooling2D(pool_size=3, strides=2)(y)\n",
        "    y = fire_module(y, 32, 128)\n",
        "    y = fire_module(y, 48, 192)\n",
        "    y = fire_module(y, 48, 192)\n",
        "    y = fire_module(y, 64, 256)\n",
        "    y = MaxPooling2D(pool_size=2)(y)\n",
        "    y = fire_module(y, 64, 256)\n",
        "    y = Conv2D(kernel_size=1, filters=1000, strides=1, padding=\"same\", activation=\"relu\")(y)\n",
        "    y = GlobalAveragePooling2D()(y)\n",
        "    y = Dense(num_classes, activation=\"softmax\")(y)\n",
        "    model = Model(input, y)\n",
        "    return model"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-03-31T04:47:52.11415Z",
          "iopub.execute_input": "2023-03-31T04:47:52.115299Z",
          "iopub.status.idle": "2023-03-31T04:47:52.149477Z",
          "shell.execute_reply.started": "2023-03-31T04:47:52.115255Z",
          "shell.execute_reply": "2023-03-31T04:47:52.148488Z"
        },
        "trusted": true,
        "id": "RklCiODR0U6q"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = SqueezeNet(\n",
        "    input_shape=(IMAGE_WIDTH, IMAGE_HEIGHT, IMAGE_CHANNELS), num_classes=len(categories)\n",
        ")\n",
        "model.compile(optimizer=\"adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\n",
        "model.summary()"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-03-31T04:48:12.79501Z",
          "iopub.execute_input": "2023-03-31T04:48:12.795604Z",
          "iopub.status.idle": "2023-03-31T04:48:13.524459Z",
          "shell.execute_reply.started": "2023-03-31T04:48:12.795568Z",
          "shell.execute_reply": "2023-03-31T04:48:13.523617Z"
        },
        "trusted": true,
        "id": "bYeRClw50U6q",
        "outputId": "05fa2bf3-a60f-49f0-f4dc-0fad190768c6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model\"\n",
            "__________________________________________________________________________________________________\n",
            " Layer (type)                Output Shape                 Param #   Connected to                  \n",
            "==================================================================================================\n",
            " input_1 (InputLayer)        [(None, 224, 224, 3)]        0         []                            \n",
            "                                                                                                  \n",
            " conv2d (Conv2D)             (None, 112, 112, 96)         14208     ['input_1[0][0]']             \n",
            "                                                                                                  \n",
            " batch_normalization (Batch  (None, 112, 112, 96)         384       ['conv2d[0][0]']              \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " max_pooling2d (MaxPooling2  (None, 55, 55, 96)           0         ['batch_normalization[0][0]'] \n",
            " D)                                                                                               \n",
            "                                                                                                  \n",
            " conv2d_1 (Conv2D)           (None, 55, 55, 16)           1552      ['max_pooling2d[0][0]']       \n",
            "                                                                                                  \n",
            " batch_normalization_1 (Bat  (None, 55, 55, 16)           64        ['conv2d_1[0][0]']            \n",
            " chNormalization)                                                                                 \n",
            "                                                                                                  \n",
            " conv2d_2 (Conv2D)           (None, 55, 55, 32)           544       ['batch_normalization_1[0][0]'\n",
            "                                                                    ]                             \n",
            "                                                                                                  \n",
            " conv2d_3 (Conv2D)           (None, 55, 55, 32)           4640      ['batch_normalization_1[0][0]'\n",
            "                                                                    ]                             \n",
            "                                                                                                  \n",
            " batch_normalization_2 (Bat  (None, 55, 55, 32)           128       ['conv2d_2[0][0]']            \n",
            " chNormalization)                                                                                 \n",
            "                                                                                                  \n",
            " batch_normalization_3 (Bat  (None, 55, 55, 32)           128       ['conv2d_3[0][0]']            \n",
            " chNormalization)                                                                                 \n",
            "                                                                                                  \n",
            " concatenate (Concatenate)   (None, 55, 55, 64)           0         ['batch_normalization_2[0][0]'\n",
            "                                                                    , 'batch_normalization_3[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " conv2d_4 (Conv2D)           (None, 55, 55, 16)           1040      ['concatenate[0][0]']         \n",
            "                                                                                                  \n",
            " batch_normalization_4 (Bat  (None, 55, 55, 16)           64        ['conv2d_4[0][0]']            \n",
            " chNormalization)                                                                                 \n",
            "                                                                                                  \n",
            " conv2d_5 (Conv2D)           (None, 55, 55, 32)           544       ['batch_normalization_4[0][0]'\n",
            "                                                                    ]                             \n",
            "                                                                                                  \n",
            " conv2d_6 (Conv2D)           (None, 55, 55, 32)           4640      ['batch_normalization_4[0][0]'\n",
            "                                                                    ]                             \n",
            "                                                                                                  \n",
            " batch_normalization_5 (Bat  (None, 55, 55, 32)           128       ['conv2d_5[0][0]']            \n",
            " chNormalization)                                                                                 \n",
            "                                                                                                  \n",
            " batch_normalization_6 (Bat  (None, 55, 55, 32)           128       ['conv2d_6[0][0]']            \n",
            " chNormalization)                                                                                 \n",
            "                                                                                                  \n",
            " concatenate_1 (Concatenate  (None, 55, 55, 64)           0         ['batch_normalization_5[0][0]'\n",
            " )                                                                  , 'batch_normalization_6[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " conv2d_7 (Conv2D)           (None, 55, 55, 32)           2080      ['concatenate_1[0][0]']       \n",
            "                                                                                                  \n",
            " batch_normalization_7 (Bat  (None, 55, 55, 32)           128       ['conv2d_7[0][0]']            \n",
            " chNormalization)                                                                                 \n",
            "                                                                                                  \n",
            " conv2d_8 (Conv2D)           (None, 55, 55, 64)           2112      ['batch_normalization_7[0][0]'\n",
            "                                                                    ]                             \n",
            "                                                                                                  \n",
            " conv2d_9 (Conv2D)           (None, 55, 55, 64)           18496     ['batch_normalization_7[0][0]'\n",
            "                                                                    ]                             \n",
            "                                                                                                  \n",
            " batch_normalization_8 (Bat  (None, 55, 55, 64)           256       ['conv2d_8[0][0]']            \n",
            " chNormalization)                                                                                 \n",
            "                                                                                                  \n",
            " batch_normalization_9 (Bat  (None, 55, 55, 64)           256       ['conv2d_9[0][0]']            \n",
            " chNormalization)                                                                                 \n",
            "                                                                                                  \n",
            " concatenate_2 (Concatenate  (None, 55, 55, 128)          0         ['batch_normalization_8[0][0]'\n",
            " )                                                                  , 'batch_normalization_9[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " max_pooling2d_1 (MaxPoolin  (None, 27, 27, 128)          0         ['concatenate_2[0][0]']       \n",
            " g2D)                                                                                             \n",
            "                                                                                                  \n",
            " conv2d_10 (Conv2D)          (None, 27, 27, 32)           4128      ['max_pooling2d_1[0][0]']     \n",
            "                                                                                                  \n",
            " batch_normalization_10 (Ba  (None, 27, 27, 32)           128       ['conv2d_10[0][0]']           \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv2d_11 (Conv2D)          (None, 27, 27, 64)           2112      ['batch_normalization_10[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " conv2d_12 (Conv2D)          (None, 27, 27, 64)           18496     ['batch_normalization_10[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " batch_normalization_11 (Ba  (None, 27, 27, 64)           256       ['conv2d_11[0][0]']           \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " batch_normalization_12 (Ba  (None, 27, 27, 64)           256       ['conv2d_12[0][0]']           \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " concatenate_3 (Concatenate  (None, 27, 27, 128)          0         ['batch_normalization_11[0][0]\n",
            " )                                                                  ',                            \n",
            "                                                                     'batch_normalization_12[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " conv2d_13 (Conv2D)          (None, 27, 27, 48)           6192      ['concatenate_3[0][0]']       \n",
            "                                                                                                  \n",
            " batch_normalization_13 (Ba  (None, 27, 27, 48)           192       ['conv2d_13[0][0]']           \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv2d_14 (Conv2D)          (None, 27, 27, 96)           4704      ['batch_normalization_13[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " conv2d_15 (Conv2D)          (None, 27, 27, 96)           41568     ['batch_normalization_13[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " batch_normalization_14 (Ba  (None, 27, 27, 96)           384       ['conv2d_14[0][0]']           \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " batch_normalization_15 (Ba  (None, 27, 27, 96)           384       ['conv2d_15[0][0]']           \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " concatenate_4 (Concatenate  (None, 27, 27, 192)          0         ['batch_normalization_14[0][0]\n",
            " )                                                                  ',                            \n",
            "                                                                     'batch_normalization_15[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " conv2d_16 (Conv2D)          (None, 27, 27, 48)           9264      ['concatenate_4[0][0]']       \n",
            "                                                                                                  \n",
            " batch_normalization_16 (Ba  (None, 27, 27, 48)           192       ['conv2d_16[0][0]']           \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv2d_17 (Conv2D)          (None, 27, 27, 96)           4704      ['batch_normalization_16[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " conv2d_18 (Conv2D)          (None, 27, 27, 96)           41568     ['batch_normalization_16[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " batch_normalization_17 (Ba  (None, 27, 27, 96)           384       ['conv2d_17[0][0]']           \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " batch_normalization_18 (Ba  (None, 27, 27, 96)           384       ['conv2d_18[0][0]']           \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " concatenate_5 (Concatenate  (None, 27, 27, 192)          0         ['batch_normalization_17[0][0]\n",
            " )                                                                  ',                            \n",
            "                                                                     'batch_normalization_18[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " conv2d_19 (Conv2D)          (None, 27, 27, 64)           12352     ['concatenate_5[0][0]']       \n",
            "                                                                                                  \n",
            " batch_normalization_19 (Ba  (None, 27, 27, 64)           256       ['conv2d_19[0][0]']           \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv2d_20 (Conv2D)          (None, 27, 27, 128)          8320      ['batch_normalization_19[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " conv2d_21 (Conv2D)          (None, 27, 27, 128)          73856     ['batch_normalization_19[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " batch_normalization_20 (Ba  (None, 27, 27, 128)          512       ['conv2d_20[0][0]']           \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " batch_normalization_21 (Ba  (None, 27, 27, 128)          512       ['conv2d_21[0][0]']           \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " concatenate_6 (Concatenate  (None, 27, 27, 256)          0         ['batch_normalization_20[0][0]\n",
            " )                                                                  ',                            \n",
            "                                                                     'batch_normalization_21[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " max_pooling2d_2 (MaxPoolin  (None, 13, 13, 256)          0         ['concatenate_6[0][0]']       \n",
            " g2D)                                                                                             \n",
            "                                                                                                  \n",
            " conv2d_22 (Conv2D)          (None, 13, 13, 64)           16448     ['max_pooling2d_2[0][0]']     \n",
            "                                                                                                  \n",
            " batch_normalization_22 (Ba  (None, 13, 13, 64)           256       ['conv2d_22[0][0]']           \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " conv2d_23 (Conv2D)          (None, 13, 13, 128)          8320      ['batch_normalization_22[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " conv2d_24 (Conv2D)          (None, 13, 13, 128)          73856     ['batch_normalization_22[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " batch_normalization_23 (Ba  (None, 13, 13, 128)          512       ['conv2d_23[0][0]']           \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " batch_normalization_24 (Ba  (None, 13, 13, 128)          512       ['conv2d_24[0][0]']           \n",
            " tchNormalization)                                                                                \n",
            "                                                                                                  \n",
            " concatenate_7 (Concatenate  (None, 13, 13, 256)          0         ['batch_normalization_23[0][0]\n",
            " )                                                                  ',                            \n",
            "                                                                     'batch_normalization_24[0][0]\n",
            "                                                                    ']                            \n",
            "                                                                                                  \n",
            " conv2d_25 (Conv2D)          (None, 13, 13, 1000)         257000    ['concatenate_7[0][0]']       \n",
            "                                                                                                  \n",
            " global_average_pooling2d (  (None, 1000)                 0         ['conv2d_25[0][0]']           \n",
            " GlobalAveragePooling2D)                                                                          \n",
            "                                                                                                  \n",
            " dense (Dense)               (None, 36)                   36036     ['global_average_pooling2d[0][\n",
            "                                                                    0]']                          \n",
            "                                                                                                  \n",
            "==================================================================================================\n",
            "Total params: 675564 (2.58 MB)\n",
            "Trainable params: 672172 (2.56 MB)\n",
            "Non-trainable params: 3392 (13.25 KB)\n",
            "__________________________________________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# model = Sequential()\n",
        "# model.add(\n",
        "#     Conv2D(\n",
        "#         filters=32,\n",
        "#         kernel_size=7,\n",
        "#         activation=\"relu\",\n",
        "#         padding=\"same\",\n",
        "#         input_shape=(IMAGE_WIDTH, IMAGE_HEIGHT, IMAGE_CHANNELS),\n",
        "#     )\n",
        "# )\n",
        "# # model.add(Conv2D(filters=16, kernel_size=3, padding=\"same\", activation=\"relu\"))\n",
        "# # model.add(BatchNormalization())\n",
        "# model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "\n",
        "# model.add(Conv2D(filters=64, kernel_size=5, padding=\"same\", activation=\"relu\"))\n",
        "# # model.add(Conv2D(filters=32, kernel_size=3, padding=\"same\", activation=\"relu\"))\n",
        "# # model.add(BatchNormalization())\n",
        "# model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "# # model.add(Dropout(0.25))\n",
        "\n",
        "# model.add(Conv2D(filters=128, kernel_size=5, padding=\"same\", activation=\"relu\"))\n",
        "# # model.add(Conv2D(filters=64, kernel_size=3, padding=\"same\", activation=\"relu\"))\n",
        "# # model.add(BatchNormalization())\n",
        "# model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "# # model.add(Dropout(0.25))\n",
        "\n",
        "# model.add(Conv2D(filters=256, kernel_size=3, padding=\"same\", activation=\"relu\"))\n",
        "# # model.add(Conv2D(filters=128, kernel_size=3, padding=\"same\", activation=\"relu\"))\n",
        "# # model.add(BatchNormalization())\n",
        "# model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "# # model.add(Dropout(0.25))\n",
        "\n",
        "# model.add(Conv2D(filters=512, kernel_size=3, padding=\"same\", activation=\"relu\"))\n",
        "# # model.add(Conv2D(filters=256, kernel_size=3, padding=\"same\", activation=\"relu\"))\n",
        "# # model.add(BatchNormalization())\n",
        "# model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "# # model.add(Dropout(0.25))\n",
        "\n",
        "# model.add(Flatten())\n",
        "# model.add(Dense(4096, activation=\"relu\"))\n",
        "# # model.add(BatchNormalization())\n",
        "# # model.add(Dropout(0.5))\n",
        "# model.add(Dense(4096, activation=\"relu\"))\n",
        "# model.add(BatchNormalization())\n",
        "# model.add(Dropout(0.5))\n",
        "# model.add(Dense(len(categories), activation=\"softmax\"))\n",
        "\n",
        "# model.compile(loss=\"categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])\n",
        "\n",
        "# model.summary()"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-03-31T02:01:05.6772Z",
          "iopub.execute_input": "2023-03-31T02:01:05.6776Z",
          "iopub.status.idle": "2023-03-31T02:01:08.218564Z",
          "shell.execute_reply.started": "2023-03-31T02:01:05.677562Z",
          "shell.execute_reply": "2023-03-31T02:01:08.217477Z"
        },
        "jupyter": {
          "source_hidden": true,
          "outputs_hidden": true
        },
        "collapsed": true,
        "trusted": true,
        "id": "GdTHBWHc0U6q"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "EPOCHS = 100\n",
        "learning_rate_reduction = ReduceLROnPlateau(\n",
        "    monitor=\"val_accuracy\", patience=3, verbose=1, factor=0.3, min_lr=0.0000001\n",
        ")\n",
        "early_stop = EarlyStopping(\n",
        "    patience=10,\n",
        "    verbose=1,\n",
        "    monitor=\"val_accuracy\",\n",
        "    mode=\"max\",\n",
        "    min_delta=0.001,\n",
        "    restore_best_weights=True,\n",
        ")\n",
        "history = model.fit(\n",
        "    train_generator,\n",
        "    epochs=EPOCHS,\n",
        "    validation_data=validation_generator,\n",
        "    validation_steps=total_validate // batch_size,\n",
        "    steps_per_epoch=total_train // batch_size,\n",
        "    callbacks=[learning_rate_reduction, early_stop],\n",
        ")"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-03-31T04:48:22.831486Z",
          "iopub.execute_input": "2023-03-31T04:48:22.832402Z",
          "iopub.status.idle": "2023-03-31T04:53:00.286623Z",
          "shell.execute_reply.started": "2023-03-31T04:48:22.832352Z",
          "shell.execute_reply": "2023-03-31T04:53:00.285542Z"
        },
        "trusted": true,
        "id": "vQx5Xn5Z0U6q",
        "outputId": "c35411a6-1a13-4cf5-e180-c7852dcf88f4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "27/27 [==============================] - 40s 391ms/step - loss: 2.8735 - accuracy: 0.1675 - val_loss: 9.3079 - val_accuracy: 0.0250 - lr: 0.0010\n",
            "Epoch 2/100\n",
            "27/27 [==============================] - 6s 225ms/step - loss: 1.6314 - accuracy: 0.4800 - val_loss: 2.9618 - val_accuracy: 0.2500 - lr: 0.0010\n",
            "Epoch 3/100\n",
            "27/27 [==============================] - 7s 236ms/step - loss: 0.9755 - accuracy: 0.6792 - val_loss: 2.3307 - val_accuracy: 0.3250 - lr: 0.0010\n",
            "Epoch 4/100\n",
            "27/27 [==============================] - 6s 236ms/step - loss: 0.6132 - accuracy: 0.8137 - val_loss: 0.8525 - val_accuracy: 0.7063 - lr: 0.0010\n",
            "Epoch 5/100\n",
            "27/27 [==============================] - 6s 229ms/step - loss: 0.4325 - accuracy: 0.8626 - val_loss: 1.1111 - val_accuracy: 0.6812 - lr: 0.0010\n",
            "Epoch 6/100\n",
            "27/27 [==============================] - 7s 248ms/step - loss: 0.3398 - accuracy: 0.8892 - val_loss: 0.6027 - val_accuracy: 0.8000 - lr: 0.0010\n",
            "Epoch 7/100\n",
            "27/27 [==============================] - 7s 247ms/step - loss: 0.2689 - accuracy: 0.9163 - val_loss: 0.5096 - val_accuracy: 0.8344 - lr: 0.0010\n",
            "Epoch 8/100\n",
            "27/27 [==============================] - 7s 269ms/step - loss: 0.2293 - accuracy: 0.9151 - val_loss: 0.4966 - val_accuracy: 0.8125 - lr: 0.0010\n",
            "Epoch 9/100\n",
            "27/27 [==============================] - 6s 217ms/step - loss: 0.1933 - accuracy: 0.9357 - val_loss: 1.1474 - val_accuracy: 0.6156 - lr: 0.0010\n",
            "Epoch 10/100\n",
            "27/27 [==============================] - ETA: 0s - loss: 0.1459 - accuracy: 0.9587\n",
            "Epoch 10: ReduceLROnPlateau reducing learning rate to 0.0003000000142492354.\n",
            "27/27 [==============================] - 6s 210ms/step - loss: 0.1459 - accuracy: 0.9587 - val_loss: 0.5629 - val_accuracy: 0.8062 - lr: 0.0010\n",
            "Epoch 11/100\n",
            "27/27 [==============================] - 7s 252ms/step - loss: 0.0877 - accuracy: 0.9764 - val_loss: 0.1152 - val_accuracy: 0.9750 - lr: 3.0000e-04\n",
            "Epoch 12/100\n",
            "27/27 [==============================] - 6s 234ms/step - loss: 0.0558 - accuracy: 0.9906 - val_loss: 0.1196 - val_accuracy: 0.9719 - lr: 3.0000e-04\n",
            "Epoch 13/100\n",
            "27/27 [==============================] - 6s 229ms/step - loss: 0.0406 - accuracy: 0.9971 - val_loss: 0.1201 - val_accuracy: 0.9688 - lr: 3.0000e-04\n",
            "Epoch 14/100\n",
            "27/27 [==============================] - ETA: 0s - loss: 0.0367 - accuracy: 0.9947\n",
            "Epoch 14: ReduceLROnPlateau reducing learning rate to 9.000000427477062e-05.\n",
            "27/27 [==============================] - 6s 223ms/step - loss: 0.0367 - accuracy: 0.9947 - val_loss: 0.0860 - val_accuracy: 0.9750 - lr: 3.0000e-04\n",
            "Epoch 15/100\n",
            "27/27 [==============================] - 6s 231ms/step - loss: 0.0252 - accuracy: 0.9988 - val_loss: 0.0830 - val_accuracy: 0.9812 - lr: 9.0000e-05\n",
            "Epoch 16/100\n",
            "27/27 [==============================] - 6s 236ms/step - loss: 0.0236 - accuracy: 0.9994 - val_loss: 0.0648 - val_accuracy: 0.9812 - lr: 9.0000e-05\n",
            "Epoch 17/100\n",
            "27/27 [==============================] - 6s 214ms/step - loss: 0.0209 - accuracy: 0.9988 - val_loss: 0.0787 - val_accuracy: 0.9812 - lr: 9.0000e-05\n",
            "Epoch 18/100\n",
            "27/27 [==============================] - ETA: 0s - loss: 0.0220 - accuracy: 1.0000\n",
            "Epoch 18: ReduceLROnPlateau reducing learning rate to 2.700000040931627e-05.\n",
            "27/27 [==============================] - 7s 242ms/step - loss: 0.0220 - accuracy: 1.0000 - val_loss: 0.0946 - val_accuracy: 0.9719 - lr: 9.0000e-05\n",
            "Epoch 19/100\n",
            "27/27 [==============================] - 7s 257ms/step - loss: 0.0175 - accuracy: 1.0000 - val_loss: 0.0832 - val_accuracy: 0.9781 - lr: 2.7000e-05\n",
            "Epoch 20/100\n",
            "27/27 [==============================] - 6s 234ms/step - loss: 0.0186 - accuracy: 1.0000 - val_loss: 0.0703 - val_accuracy: 0.9844 - lr: 2.7000e-05\n",
            "Epoch 21/100\n",
            "27/27 [==============================] - 6s 220ms/step - loss: 0.0170 - accuracy: 1.0000 - val_loss: 0.0832 - val_accuracy: 0.9812 - lr: 2.7000e-05\n",
            "Epoch 22/100\n",
            "27/27 [==============================] - 7s 243ms/step - loss: 0.0184 - accuracy: 1.0000 - val_loss: 0.0704 - val_accuracy: 0.9750 - lr: 2.7000e-05\n",
            "Epoch 23/100\n",
            "27/27 [==============================] - ETA: 0s - loss: 0.0165 - accuracy: 1.0000\n",
            "Epoch 23: ReduceLROnPlateau reducing learning rate to 8.100000013655517e-06.\n",
            "27/27 [==============================] - 7s 244ms/step - loss: 0.0165 - accuracy: 1.0000 - val_loss: 0.0809 - val_accuracy: 0.9781 - lr: 2.7000e-05\n",
            "Epoch 24/100\n",
            "27/27 [==============================] - 6s 229ms/step - loss: 0.0167 - accuracy: 1.0000 - val_loss: 0.0792 - val_accuracy: 0.9812 - lr: 8.1000e-06\n",
            "Epoch 25/100\n",
            "27/27 [==============================] - 6s 211ms/step - loss: 0.0176 - accuracy: 1.0000 - val_loss: 0.0649 - val_accuracy: 0.9812 - lr: 8.1000e-06\n",
            "Epoch 26/100\n",
            "27/27 [==============================] - ETA: 0s - loss: 0.0162 - accuracy: 1.0000\n",
            "Epoch 26: ReduceLROnPlateau reducing learning rate to 2.429999949526973e-06.\n",
            "27/27 [==============================] - 7s 246ms/step - loss: 0.0162 - accuracy: 1.0000 - val_loss: 0.0819 - val_accuracy: 0.9812 - lr: 8.1000e-06\n",
            "Epoch 27/100\n",
            "27/27 [==============================] - 6s 234ms/step - loss: 0.0145 - accuracy: 1.0000 - val_loss: 0.0649 - val_accuracy: 0.9812 - lr: 2.4300e-06\n",
            "Epoch 28/100\n",
            "27/27 [==============================] - 7s 242ms/step - loss: 0.0174 - accuracy: 1.0000 - val_loss: 0.0819 - val_accuracy: 0.9781 - lr: 2.4300e-06\n",
            "Epoch 29/100\n",
            "27/27 [==============================] - ETA: 0s - loss: 0.0173 - accuracy: 0.9994\n",
            "Epoch 29: ReduceLROnPlateau reducing learning rate to 7.289999985005124e-07.\n",
            "27/27 [==============================] - 6s 218ms/step - loss: 0.0173 - accuracy: 0.9994 - val_loss: 0.0752 - val_accuracy: 0.9844 - lr: 2.4300e-06\n",
            "Epoch 30/100\n",
            "27/27 [==============================] - ETA: 0s - loss: 0.0156 - accuracy: 1.0000Restoring model weights from the end of the best epoch: 20.\n",
            "27/27 [==============================] - 7s 238ms/step - loss: 0.0156 - accuracy: 1.0000 - val_loss: 0.0585 - val_accuracy: 0.9844 - lr: 7.2900e-07\n",
            "Epoch 30: early stopping\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig, (ax1, ax2) = plt.subplots(2, 1)\n",
        "ax1.plot(history.history[\"loss\"], color=\"b\", label=\"Training loss\")\n",
        "ax1.plot(history.history[\"val_loss\"], color=\"r\", label=\"validation loss\")\n",
        "ax1.legend()\n",
        "\n",
        "ax2.plot(history.history[\"accuracy\"], color=\"b\", label=\"Training accuracy\")\n",
        "ax2.plot(history.history[\"val_accuracy\"], color=\"r\", label=\"Validation accuracy\")\n",
        "ax2.legend()\n",
        "\n",
        "legend = plt.legend(loc=\"best\")\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-03-31T04:53:48.073614Z",
          "iopub.execute_input": "2023-03-31T04:53:48.074226Z",
          "iopub.status.idle": "2023-03-31T04:53:48.461832Z",
          "shell.execute_reply.started": "2023-03-31T04:53:48.07418Z",
          "shell.execute_reply": "2023-03-31T04:53:48.460691Z"
        },
        "trusted": true,
        "id": "8VY0sLt70U6q",
        "outputId": "1e707a10-8d00-47de-9a47-8a8e6e4e2ccf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        }
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "filenames = test_generator.filenames\n",
        "nb_samples = len(filenames)\n",
        "\n",
        "_, accuracy = model.evaluate_generator(test_generator, nb_samples)\n",
        "print(\"Accuracy on test set = \", round((accuracy * 100), 2), \"% \")"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-03-31T04:53:51.735405Z",
          "iopub.execute_input": "2023-03-31T04:53:51.735803Z",
          "iopub.status.idle": "2023-03-31T04:53:54.153723Z",
          "shell.execute_reply.started": "2023-03-31T04:53:51.735768Z",
          "shell.execute_reply": "2023-03-31T04:53:54.152711Z"
        },
        "trusted": true,
        "id": "Ka5vrish0U6q",
        "outputId": "b9bc50a0-d2e6-4018-c55c-6f3535345be3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-14-3bec3a93550b>:4: UserWarning: `Model.evaluate_generator` is deprecated and will be removed in a future version. Please use `Model.evaluate`, which supports generators.\n",
            "  _, accuracy = model.evaluate_generator(test_generator, nb_samples)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy on test set =  98.41 % \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gen_label_map = test_generator.class_indices\n",
        "gen_label_map = dict((v, k) for k, v in gen_label_map.items())\n",
        "print(gen_label_map)"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-03-31T04:28:51.363157Z",
          "iopub.execute_input": "2023-03-31T04:28:51.363895Z",
          "iopub.status.idle": "2023-03-31T04:28:51.374031Z",
          "shell.execute_reply.started": "2023-03-31T04:28:51.363851Z",
          "shell.execute_reply": "2023-03-31T04:28:51.37298Z"
        },
        "trusted": true,
        "id": "Sln_YGAc0U6q",
        "outputId": "49546cba-3f70-4be4-ced9-1bc52ad52fd2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{0: '0', 1: '1', 2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9', 10: 'a', 11: 'b', 12: 'c', 13: 'd', 14: 'e', 15: 'f', 16: 'g', 17: 'h', 18: 'i', 19: 'j', 20: 'k', 21: 'l', 22: 'm', 23: 'n', 24: 'o', 25: 'p', 26: 'q', 27: 'r', 28: 's', 29: 't', 30: 'u', 31: 'v', 32: 'w', 33: 'x', 34: 'y', 35: 'z'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "preds = model.predict(test_generator, nb_samples)\n",
        "\n",
        "# Get the category with the highest predicted probability, the prediction is only the category's number and not name\n",
        "preds = preds.argmax(1)\n",
        "\n",
        "# Convert the predicted category's number to name\n",
        "preds = [gen_label_map[item] for item in preds]\n",
        "\n",
        "# Convert the pandas dataframe to a numpy matrix\n",
        "labels = test_df[\"category\"].to_numpy()\n",
        "\n",
        "print(classification_report(labels, preds))"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-03-31T04:45:34.969549Z",
          "iopub.execute_input": "2023-03-31T04:45:34.970245Z",
          "iopub.status.idle": "2023-03-31T04:45:37.397284Z",
          "shell.execute_reply.started": "2023-03-31T04:45:34.970206Z",
          "shell.execute_reply": "2023-03-31T04:45:37.396153Z"
        },
        "trusted": true,
        "id": "BAvdU8PT0U6q",
        "outputId": "911fbb48-8b1d-4320-b74d-a3e151fc5a05",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "378/378 [==============================] - 4s 8ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      0.93      0.97        15\n",
            "           1       1.00      1.00      1.00         9\n",
            "           2       1.00      1.00      1.00         9\n",
            "           3       1.00      1.00      1.00         9\n",
            "           4       0.88      1.00      0.94        15\n",
            "           5       1.00      0.71      0.83         7\n",
            "           6       1.00      1.00      1.00        11\n",
            "           7       1.00      1.00      1.00        12\n",
            "           8       1.00      1.00      1.00         6\n",
            "           9       1.00      1.00      1.00        17\n",
            "           a       1.00      0.88      0.93         8\n",
            "           b       1.00      1.00      1.00        10\n",
            "           c       1.00      1.00      1.00         6\n",
            "           d       1.00      1.00      1.00         7\n",
            "           e       1.00      1.00      1.00         7\n",
            "           f       1.00      1.00      1.00        12\n",
            "           g       1.00      1.00      1.00         7\n",
            "           h       1.00      1.00      1.00         9\n",
            "           i       1.00      1.00      1.00        12\n",
            "           j       0.91      1.00      0.95        10\n",
            "           k       1.00      1.00      1.00         9\n",
            "           l       1.00      1.00      1.00        15\n",
            "           m       0.93      1.00      0.96        13\n",
            "           n       0.93      0.93      0.93        15\n",
            "           o       0.93      1.00      0.96        13\n",
            "           p       1.00      1.00      1.00         7\n",
            "           q       1.00      1.00      1.00        10\n",
            "           r       1.00      1.00      1.00        12\n",
            "           s       1.00      1.00      1.00        10\n",
            "           t       1.00      1.00      1.00        19\n",
            "           u       1.00      1.00      1.00        10\n",
            "           v       1.00      1.00      1.00         5\n",
            "           w       1.00      1.00      1.00        12\n",
            "           x       1.00      0.93      0.96        14\n",
            "           y       1.00      1.00      1.00         8\n",
            "           z       1.00      1.00      1.00         8\n",
            "\n",
            "    accuracy                           0.98       378\n",
            "   macro avg       0.99      0.98      0.98       378\n",
            "weighted avg       0.99      0.98      0.98       378\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import metrics\n",
        "from sklearn.metrics import confusion_matrix\n",
        "import seaborn as sns\n",
        "\n",
        "confusion_matrix = metrics.confusion_matrix(labels, preds, normalize=\"true\")\n",
        "cm_df = pd.DataFrame(\n",
        "    confusion_matrix, index=categories.values(), columns=categories.values()\n",
        ")\n",
        "plt.figure(figsize=(20, 15))\n",
        "sns.heatmap(cm_df, annot=True)\n",
        "plt.title(\"Confusion Matrix\")\n",
        "plt.ylabel(\"Actal Values\")\n",
        "plt.xlabel(\"Predicted Values\")\n",
        "plt.show()"
      ],
      "metadata": {
        "execution": {
          "iopub.status.busy": "2023-03-31T04:45:44.35608Z",
          "iopub.execute_input": "2023-03-31T04:45:44.356653Z",
          "iopub.status.idle": "2023-03-31T04:45:48.232566Z",
          "shell.execute_reply.started": "2023-03-31T04:45:44.356603Z",
          "shell.execute_reply": "2023-03-31T04:45:48.231397Z"
        },
        "trusted": true,
        "id": "lSvkP2os0U6r",
        "outputId": "8569e943-ef5c-4185-8a90-eb693ae9bed4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x1500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}